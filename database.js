// database.js
// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–ª–∞—á–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –¥–∞–Ω–Ω—ã—Ö –Ω–∞ GitHub

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub
const GITHUB_OWNER = 'Alexandrpen';
const GITHUB_REPO = 'Shnek-Journal';
const GITHUB_DATA_FILE = 'journal-data.json';

class GitHubDatabase {
    constructor() {
        this.owner = GITHUB_OWNER;
        this.repo = GITHUB_REPO;
        this.branch = 'main';
        this.token = null;
        this.dataFile = GITHUB_DATA_FILE;
        this.cache = null;
        this.lastSync = null;
        this.CACHE_DURATION = 5 * 60 * 1000;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        this.token = localStorage.getItem('github_token');
    }

    // ===== –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –¢–û–ö–ï–ù–û–ú =====

    setToken(token) {
        this.token = token;
        localStorage.setItem('github_token', token);
        console.log('GitHub token —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    getToken() {
        return this.token;
    }

    hasToken() {
        return !!this.token;
    }

    clearToken() {
        this.token = null;
        localStorage.removeItem('github_token');
        console.log('GitHub token –æ—á–∏—â–µ–Ω');
    }

    async requestToken() {
        return new Promise((resolve) => {
            const token = prompt(
                'üîê –î–õ–Ø –û–ë–õ–ê–ß–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò üîê\n\n' +
                '–¢—Ä–µ–±—É–µ—Ç—Å—è GitHub Personal Access Token\n\n' +
                '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–æ–∫–µ–Ω–∞:\n' +
                '1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ GitHub.com ‚Üí Settings ‚Üí Developer settings\n' +
                '2. –í—ã–±–µ—Ä–∏—Ç–µ "Personal access tokens" ‚Üí "Tokens (classic)"\n' +
                '3. –ù–∞–∂–º–∏—Ç–µ "Generate new token"\n' +
                '4. –ù–∞–∑–≤–∞–Ω–∏–µ: "Shnek Journal"\n' +
                '5. –°—Ä–æ–∫: "No expiration" (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n' +
                '6. –ü—Ä–∞–≤–∞: ‚úÖ –û—Ç–º–µ—Ç—å—Ç–µ "repo" (–ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å)\n' +
                '7. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∏–∂–µ:\n\n' +
                '–¢–æ–∫–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ghp_...'
            );
            
            if (token && token.trim()) {
                this.setToken(token.trim());
                resolve(true);
            } else {
                resolve(false);
            }
        });
    }

    // ===== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° GITHUB API =====

    async testConnection() {
        try {
            const headers = this.getHeaders();
            const response = await fetch(
                `https://api.github.com/repos/${this.owner}/${this.repo}`,
                { headers }
            );

            if (!response.ok) {
                // –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
                if (response.status === 404) {
                    throw new Error('–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
                if (response.status === 403 && !this.hasToken()) {
                    // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –≥–æ—Å—Ç—è —Å –ø—É–±–ª–∏—á–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
                    return true;
                }
                throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${response.status}`);
            }

            console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub —É—Å–ø–µ—à–Ω–æ');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub:', error);
            
            // –î–ª—è –≥–æ—Å—Ç—è –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
            if (!this.hasToken() && error.message.includes('403')) {
                console.log('–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é');
                return true;
            }
            
            throw error;
        }
    }

    async loadData() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.cache && this.lastSync && (Date.now() - this.lastSync) < this.CACHE_DURATION) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            return this.cache;
        }

        try {
            const headers = this.getHeaders();
            const response = await fetch(
                `https://api.github.com/repos/${this.owner}/${this.repo}/contents/${this.dataFile}`,
                { headers }
            );

            if (response.status === 404) {
                console.log('–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
                const emptyData = { line1: {}, line2: {}, line3: {} };
                this.cache = emptyData;
                this.lastSync = Date.now();
                return emptyData;
            }

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                
                // –î–ª—è –≥–æ—Å—Ç—è –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                if (response.status === 403 && !this.hasToken()) {
                    console.log('–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π');
                    const emptyData = { line1: {}, line2: {}, line3: {} };
                    this.cache = emptyData;
                    this.lastSync = Date.now();
                    return emptyData;
                }
                
                if (response.status === 401 || response.status === 403) {
                    this.clearToken();
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –¢–æ–∫–µ–Ω –æ—á–∏—â–µ–Ω.');
                }
                
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`);
            }

            const data = await response.json();
            const content = this.decodeBase64(data.content);
            const journalData = JSON.parse(content);
            
            this.cache = journalData;
            this.lastSync = Date.now();
            
            console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ GitHub');
            return journalData;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            
            // –î–ª—è –≥–æ—Å—Ç—è –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (!this.hasToken()) {
                console.log('–ì–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                const emptyData = { line1: {}, line2: {}, line3: {} };
                this.cache = emptyData;
                this.lastSync = Date.now();
                return emptyData;
            }
            
            throw error;
        }
    }

    async saveData(journalData) {
        if (!this.hasToken()) {
            throw new Error('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º GitHub.');
        }

        try {
            let sha = null;
            
            // –ü–æ–ª—É—á–∞–µ–º SHA —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            try {
                const headers = this.getHeaders();
                const currentFileResponse = await fetch(
                    `https://api.github.com/repos/${this.owner}/${this.repo}/contents/${this.dataFile}`,
                    { headers }
                );
                
                if (currentFileResponse.ok) {
                    const data = await currentFileResponse.json();
                    sha = data.sha;
                }
            } catch (e) {
                console.log('–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
            }

            const content = this.encodeBase64(JSON.stringify(journalData, null, 2));
            const headers = this.getHeaders();
            
            const response = await fetch(
                `https://api.github.com/repos/${this.owner}/${this.repo}/contents/${this.dataFile}`,
                {
                    method: 'PUT',
                    headers: {
                        ...headers,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        message: `üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: ${new Date().toLocaleString('ru-RU')}`,
                        content: content,
                        branch: this.branch,
                        sha: sha
                    })
                }
            );

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                
                if (response.status === 409) {
                    throw new Error('–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.');
                }
                
                if (response.status === 401 || response.status === 403) {
                    this.clearToken();
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –¢–æ–∫–µ–Ω –æ—á–∏—â–µ–Ω.');
                }
                
                throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${response.status}`);
            }

            this.cache = journalData;
            this.lastSync = Date.now();
            
            console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

    getHeaders() {
        const headers = {
            'Accept': 'application/vnd.github.v3+json'
        };

        if (this.hasToken()) {
            headers['Authorization'] = `token ${this.getToken()}`;
        }

        return headers;
    }

    encodeBase64(str) {
        return btoa(unescape(encodeURIComponent(str)));
    }

    decodeBase64(str) {
        return decodeURIComponent(escape(atob(str)));
    }

    clearCache() {
        this.cache = null;
        this.lastSync = null;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
const gitHubDB = new GitHubDatabase();
