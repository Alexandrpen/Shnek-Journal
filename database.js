// database.js
const GITHUB_OWNER = 'Alexandrpen';
const GITHUB_REPO = 'Shnek-Journal';

class GitHubDatabase {
    constructor() {
        this.owner = GITHUB_OWNER;
        this.repo = GITHUB_REPO;
        this.branch = 'main';
        this.token = null;
        this.dataFile = 'journal-data.json';
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞
    setToken(token) {
        this.token = token;
        localStorage.setItem('github_token', token);
        console.log('GitHub token —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    getToken() {
        if (!this.token) {
            this.token = localStorage.getItem('github_token');
        }
        return this.token;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    hasToken() {
        return !!this.getToken();
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞
    clearToken() {
        this.token = null;
        localStorage.removeItem('github_token');
        console.log('GitHub token –æ—á–∏—â–µ–Ω');
    }

    // –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async requestToken() {
        return new Promise((resolve) => {
            const token = prompt(
                'üîê –î–õ–Ø –û–ë–õ–ê–ß–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò üîê\n\n' +
                '–¢—Ä–µ–±—É–µ—Ç—Å—è GitHub Personal Access Token\n\n' +
                '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–æ–∫–µ–Ω–∞:\n' +
                '1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ GitHub.com ‚Üí Settings ‚Üí Developer settings\n' +
                '2. –í—ã–±–µ—Ä–∏—Ç–µ "Personal access tokens" ‚Üí "Tokens (classic)"\n' +
                '3. –ù–∞–∂–º–∏—Ç–µ "Generate new token"\n' +
                '4. –ù–∞–∑–≤–∞–Ω–∏–µ: "Shnek Journal"\n' +
                '5. –°—Ä–æ–∫: "No expiration" (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n' +
                '6. –ü—Ä–∞–≤–∞: ‚úÖ –û—Ç–º–µ—Ç—å—Ç–µ "repo" (–ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å)\n' +
                '7. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∏–∂–µ:\n\n' +
                '–¢–æ–∫–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ghp_...'
            );
            
            if (token && token.trim()) {
                this.setToken(token.trim());
                resolve(true);
            } else {
                resolve(false);
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    async testConnection() {
        if (!this.hasToken()) {
            throw new Error('GitHub token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        try {
            const response = await fetch(
                `https://api.github.com/repos/${this.owner}/${this.repo}`,
                {
                    headers: {
                        'Authorization': `token ${this.getToken()}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                }
            );

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${response.status}`);
            }

            console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub —É—Å–ø–µ—à–Ω–æ');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub:', error);
            throw error;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    async loadData() {
        if (!this.hasToken()) {
            throw new Error('GitHub token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        let retries = 3;
        
        while (retries > 0) {
            try {
                const response = await fetch(
                    `https://api.github.com/repos/${this.owner}/${this.repo}/contents/${this.dataFile}`,
                    {
                        headers: {
                            'Authorization': `token ${this.getToken()}`,
                            'Accept': 'application/vnd.github.v3+json'
                        }
                    }
                );

                if (response.status === 404) {
                    console.log('–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
                    return { line1: {}, line2: {}, line3: {} };
                }

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    
                    if (response.status === 409 && retries > 1) {
                        retries--;
                        console.log(`–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞... (–æ—Å—Ç–∞–ª–æ—Å—å: ${retries})`);
                        await this.delay(1000);
                        continue;
                    }
                    
                    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status} - ${errorData.message || response.statusText}`);
                }

                const data = await response.json();
                const content = this.decodeBase64(data.content);
                const journalData = JSON.parse(content);
                
                console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ GitHub');
                return journalData;
            } catch (error) {
                if (error.message.includes('409') && retries > 1) {
                    retries--;
                    console.log(`–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞... (–æ—Å—Ç–∞–ª–æ—Å—å: ${retries})`);
                    await this.delay(1000);
                    continue;
                }
                
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
                
                if (error.message.includes('401') || error.message.includes('403')) {
                    this.clearToken();
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –¢–æ–∫–µ–Ω –æ—á–∏—â–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.');
                }
                
                throw error;
            }
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    async saveData(journalData) {
        if (!this.hasToken()) {
            throw new Error('GitHub token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        let retries = 3;
        
        while (retries > 0) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π SHA —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
                let sha = null;
                try {
                    const currentFileResponse = await fetch(
                        `https://api.github.com/repos/${this.owner}/${this.repo}/contents/${this.dataFile}`,
                        {
                            headers: {
                                'Authorization': `token ${this.getToken()}`,
                                'Accept': 'application/vnd.github.v3+json'
                            }
                        }
                    );
                    
                    if (currentFileResponse.ok) {
                        const data = await currentFileResponse.json();
                        sha = data.sha;
                        console.log('–ü–æ–ª—É—á–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π SHA —Ñ–∞–π–ª–∞:', sha.substring(0, 8) + '...');
                    }
                } catch (e) {
                    // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    console.log('–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
                }

                const content = this.encodeBase64(JSON.stringify(journalData, null, 2));
                
                const response = await fetch(
                    `https://api.github.com/repos/${this.owner}/${this.repo}/contents/${this.dataFile}`,
                    {
                        method: 'PUT',
                        headers: {
                            'Authorization': `token ${this.getToken()}`,
                            'Accept': 'application/vnd.github.v3+json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            message: `üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: ${new Date().toLocaleString('ru-RU')}`,
                            content: content,
                            branch: this.branch,
                            sha: sha // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π SHA –∏–ª–∏ null –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                        })
                    }
                );

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –≤–µ—Ä—Å–∏–π (409)
                    if (response.status === 409 && retries > 1) {
                        retries--;
                        console.log(`–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –û–±–Ω–æ–≤–ª—è—é SHA –∏ –ø–æ–≤—Ç–æ—Ä—è—é... (–æ—Å—Ç–∞–ª–æ—Å—å: ${retries})`);
                        await this.delay(1000);
                        continue;
                    }
                    
                    if (response.status === 401 || response.status === 403) {
                        this.clearToken();
                        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –¢–æ–∫–µ–Ω –æ—á–∏—â–µ–Ω.');
                    }
                    
                    throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${response.status} - ${errorData.message || response.statusText}`);
                }

                console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub');
                return true;
            } catch (error) {
                if (error.message.includes('409') && retries > 1) {
                    retries--;
                    console.log(`–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞... (–æ—Å—Ç–∞–ª–æ—Å—å: ${retries})`);
                    await this.delay(1000);
                    continue;
                }
                
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
                throw error;
            }
        }
        
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ base64
    encodeBase64(str) {
        return btoa(unescape(encodeURIComponent(str)));
    }

    // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ base64
    decodeBase64(str) {
        return decodeURIComponent(escape(atob(str)));
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const gitHubDB = new GitHubDatabase();
